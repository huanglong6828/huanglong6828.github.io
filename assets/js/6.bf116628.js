(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{451:function(e,t,a){e.exports=a.p+"assets/img/git.db1495db.png"},458:function(e,t,a){"use strict";a.r(t);var r=a(2),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("by "),r("a",{attrs:{href:"https://github.com/huanglong6828",target:"_blank",rel:"noopener noreferrer"}},[e._v("@huanglong"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("个人推荐git可视化工具 "),r("a",{attrs:{href:"https://www.sourcetreeapp.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("sourcetree"),r("OutboundLink")],1)]),e._v(" "),r("h2",{attrs:{id:"分支命名"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支命名"}},[e._v("#")]),e._v(" 分支命名")]),e._v(" "),r("p",[e._v("主要分为"),r("code",[e._v("master")]),e._v("、"),r("code",[e._v("develop")]),e._v("、"),r("code",[e._v("debug")]),e._v("、"),r("code",[e._v("userName")])]),e._v(" "),r("h3",{attrs:{id:"master-主分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#master-主分支"}},[e._v("#")]),e._v(" master: 主分支")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("master 为主分支，也是用于部署生产环境的分支，master 分支要确保稳定性")])]),e._v(" "),r("li",[r("p",[e._v("master 分支一般由 dev 以及 debug 分支合并，任何时间都不能直接修改代码")])])]),e._v(" "),r("h3",{attrs:{id:"dev-开发分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dev-开发分支"}},[e._v("#")]),e._v(" dev: 开发分支")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("dev 为开发分支，始终保持最新完成以及bug修复后的代码")])]),e._v(" "),r("li",[r("p",[e._v("当我们在 userName 分支开发完毕后要将代码提交到 dev 分支，dev 的代码将发布到测试环境供测试人员测试。")])])]),e._v(" "),r("h3",{attrs:{id:"debug-补丁分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#debug-补丁分支"}},[e._v("#")]),e._v(" debug: 补丁分支")]),e._v(" "),r("ul",[r("li",[e._v("线上出现紧急问题时，以 master 分支为基线，合并 debug 分支。用于需要及时修复，修复完成后，需要合并到 dev 分支")])]),e._v(" "),r("h3",{attrs:{id:"username-开发人员独立分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#username-开发人员独立分支"}},[e._v("#")]),e._v(" userName: 开发人员独立分支")]),e._v(" "),r("ul",[r("li",[e._v("模块化开发功能，开发完毕后合并到 dev 分支，然后发布测试环境供测试人员测试。")]),e._v(" "),r("li",[e._v("自分支命名: 如：huanglong 为特性分支。")])]),e._v(" "),r("h2",{attrs:{id:"提交流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#提交流程"}},[e._v("#")]),e._v(" 提交流程")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("1、当有功能开发完成，首先 userName 分支会合并到 dev 分支，进入提测。")])]),e._v(" "),r("li",[r("p",[e._v("2、如果测试过程中存在 bug 需要修复，则直接由开发者在 dev 分支修复并提交。")])]),e._v(" "),r("li",[r("p",[e._v("3、当测试完成之后，合并 dev 分支到 master 分支，此时 master 为最新代码，用作上线。")])]),e._v(" "),r("li",[r("p",[e._v("4、出现紧急bug时，合并 master 分支到 debug 分支。重新走123流程")])])]),e._v(" "),r("p",[r("img",{attrs:{src:a(451),alt:"An image"}})]),e._v(" "),r("h2",{attrs:{id:"提交规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#提交规范"}},[e._v("#")]),e._v(" 提交规范")]),e._v(" "),r("p",[e._v("Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交，这其实就是规范，但输入的说明我们可以随便写。")]),e._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[e._v("\n  ✨feat：新功能\n  🚑fix：修补bug\n  📚docs：修改文档\n  🎨style： 格式化代码结构，没有逻辑上的代码修改\n  🚜refactor：重构，即不是新增功能，也不是修改bug的代码变动，比如重命名变量\n  🔬test：增加测试代码，单元测试一类的，没有生产代码的变更\n  chore：构建过程或辅助工具的变动（不会影响代码运行）\n\n")])])]),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),r("p",[e._v("以上规范不一定是必须的，一般是根据实际情况来的，总结下自己工作中的一些问题")]),e._v(" "),r("ul",[r("li",[e._v("自己的分支一定要自测，切记不要提交后，影响到其他代码，更别说别人拉下代码还报错这种低级错误")]),e._v(" "),r("li",[e._v("本地分支要做到勤提交，分小功能提交，一次提交一大堆各种功能的做法也要杜绝")]),e._v(" "),r("li",[e._v("每天第一件事就是更新 develop 分支内容到本地分支，避免大规模 merge，太容易出错了")]),e._v(" "),r("li",[e._v("迭代新版本时，一定要保证当前开发分支和线上分支一样")])])])}),[],!1,null,null,null);t.default=s.exports}}]);